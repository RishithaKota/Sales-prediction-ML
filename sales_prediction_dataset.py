# -*- coding: utf-8 -*-
"""Sales Prediction dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-IZIbhbkT0uxfwDHI0aWFt72OwNe_dj5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import pickle as pickle
import os

data=pd.read_excel("/content/advertising_sales_data.xlsx")

data.head()

data=data.drop(columns=['Campaign'])

data.describe()

"""What is the average amount spent on TV advertising in the dataset?"""

print("Average money spent on TV advertising:", data['TV'].mean())

"""What is the correlation between radio advertising expenditure and product sales?"""

attribute1 = data['Radio']
attribute2 = data['Sales']
correlation = attribute1.corr(attribute2)
print(f'Correlation between Radio advertising and Product sales: {correlation}')

"""Which advertising medium has the highest impact on sales based on the dataset?"""

attribute1 = data['TV']
attribute2 = data['Sales']
correlation = attribute1.corr(attribute2)
print(f'Correlation between TV advertising and Product sales: {correlation}')

attribute1 = data['Newspaper']
attribute2 = data['Sales']
correlation = attribute1.corr(attribute2)
print(f'Correlation between Newspaper advertising and Product sales: {correlation}')

"""Since TV advertising is close to 1, it has the highest impact on sales"""

data = data.dropna()

data = data.drop_duplicates()

num_imputer = SimpleImputer(strategy='mean')
data['Radio'] = num_imputer.fit_transform(data[['Radio']])

num_imputer = SimpleImputer(strategy='mean')
data['TV'] = num_imputer.fit_transform(data[['TV']])

num_imputer = SimpleImputer(strategy='mean')
data['Newspaper'] = num_imputer.fit_transform(data[['Newspaper']])

y = data['Sales']
x = data.drop(columns=['Sales'])

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size= 0.8, shuffle=True, random_state = 1)

y_train

x_train

linear_regression_model = LinearRegression()
linear_regression_model.fit(x_train, y_train)

y_pred = linear_regression_model.predict(x)

"""Plot a linear regression line that includes all variables (TV, Radio, Newspaper) to predict Sales, and visualize the model's predictions against the actual sales values."""

plt.figure(figsize=(10, 6))
plt.scatter(y, y_pred, color='blue', label='Predicted vs Actual')

plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--', label='Perfect Prediction')

plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.legend()
plt.show()

print("Linear Regression Model Performance Metrics:\n")
y_pred = linear_regression_model.predict(x_test)

mse=mean_squared_error(y_test,y_pred)
print("Mean Squared Error:", mse)

rmse=mean_squared_error(y_test, y_pred, squared=False)
print("Root Mean Squared Error:", rmse)

mae= mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

r2=r2_score(y_test,y_pred)
print("R-squared Score:", r2)

"""How would sales be predicted for a new set of advertising expenditures: $200 on TV, $40 on Radio, and $50 on Newspaper?"""

new_data = [[200, 40, 50]]
predicted_sales = linear_regression_model.predict(new_data)
print(f'Predicted Sales: {predicted_sales[0]}')

"""How does the performance of the linear regression model change when the dataset is normalized?"""

y = data['Sales']
x = data.drop(columns=['Sales'])

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size= 0.8, shuffle=True, random_state = 1)

scaler = StandardScaler()
scaler.fit(x_train)
x_train = pd.DataFrame(scaler.transform(x_train), index=x_train.index, columns=x_train.columns)
x_test = pd.DataFrame(scaler.transform(x_test), index=x_test.index, columns=x_test.columns)

x_train

linear_regression_model = LinearRegression()
linear_regression_model.fit(x_train, y_train)

y_pred = linear_regression_model.predict(x)

print("Linear Regression Model Performance Metrics:\n")
y_pred = linear_regression_model.predict(x_test)

mse=mean_squared_error(y_test,y_pred)
print("Mean Squared Error:", mse)

rmse=mean_squared_error(y_test, y_pred, squared=False)
print("Root Mean Squared Error:", rmse)

mae= mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

r2=r2_score(y_test,y_pred)
print("R-squared Score:", r2)

"""What is the impact on the sales prediction when only radio and newspaper advertising expenditures are used as predictors?"""

X_subset = data[['Radio', 'Newspaper']]
model_subset = LinearRegression()
model_subset.fit(X_subset, y)
y_pred_subset = model_subset.predict(X_subset)
mse_subset = mean_squared_error(y, y_pred_subset)
r2_subset = r2_score(y, y_pred_subset)

print(f'\nPerformance using Radio and Newspaper predictors:')
print(f'Mean Squared Error: {mse_subset}')
print(f'R-squared Score: {r2_subset}')

"""Indicates high error if only Radio and Newspaper are considered for sales prediction"""